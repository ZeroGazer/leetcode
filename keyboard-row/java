class Solution {

    private Map<Character, Integer> map = Map.ofEntries(
        Map.entry('q', 1),
        Map.entry('w', 1),
        Map.entry('e', 1),
        Map.entry('r', 1),
        Map.entry('t', 1),
        Map.entry('y', 1),
        Map.entry('u', 1),
        Map.entry('i', 1),
        Map.entry('o', 1),
        Map.entry('p', 1),
        Map.entry('a', 2),
        Map.entry('s', 2),
        Map.entry('d', 2),
        Map.entry('f', 2),
        Map.entry('g', 2),
        Map.entry('h', 2),
        Map.entry('j', 2),
        Map.entry('k', 2),
        Map.entry('l', 2),
        Map.entry('z', 3),
        Map.entry('x', 3),
        Map.entry('c', 3),
        Map.entry('v', 3),
        Map.entry('b', 3),
        Map.entry('n', 3),
        Map.entry('m', 3)
    );

    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (String word : words) {
            String s = word.toLowerCase();
            int i = map.get(s.charAt(0));
            boolean match = true;
            for (int j = 1; j < s.length(); j++) {
                if (map.get(s.charAt(j)) != i) {
                    match = false;
                    break;
                }
            }
            if (match) {
                result.add(word);
            }
        }
        return result.toArray(new String[0]);
    }
}
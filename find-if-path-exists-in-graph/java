class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] edge: edges) {
            graph.computeIfAbsent(edge[0], k -> new ArrayList<Integer>()).add(edge[1]);
            graph.computeIfAbsent(edge[1], k -> new ArrayList<Integer>()).add(edge[0]);
        }

        Queue<Integer> queue = new LinkedList<>();
        boolean[] seen = new boolean[n];
        seen[source] = true;
        queue.add(source);
        while (!queue.isEmpty()) {
            int node = queue.remove();
            if (node == destination) {
                return true;
            }
            for (int neighbour: graph.get(node)) {
                if (!seen[neighbour]) {
                    seen[neighbour] = true;
                    queue.offer(neighbour);
                }
            }
        }

        return false;
    }
}
class Solution {
    public int minDays(int[][] grid) {
        int islands = count(grid);
        if (islands != 1) {
            return 0;
        }
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                grid[i][j] = 0;
                islands = count(grid);
                if (islands != 1) {
                    return 1;
                } else {
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }

    private int count(int[][] grid) {
        boolean[][] seen = new boolean[grid.length][grid[0].length];
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 1 && !seen[i][j]) {
                    seen[i][j] = true;
                    dfs(grid, seen, i, j);
                    count++;
                }
            }
        }
        return count;
    }

    private void dfs(int[][] grid, boolean[][] seen, int x, int y) {
        if (x + 1 < grid.length && grid[x + 1][y] == 1 && !seen[x + 1][y]) {
            seen[x + 1][y] = true;
            dfs(grid, seen, x + 1, y);
        }
        if (x - 1 >= 0 && grid[x - 1][y] == 1 && !seen[x - 1][y]) {
            seen[x - 1][y] = true;
            dfs(grid, seen, x - 1, y);
        }
        if (y + 1 < grid[0].length && grid[x][y + 1] == 1 && !seen[x][y + 1]) {
            seen[x][y + 1] = true;
            dfs(grid, seen, x, y + 1);
        }
        if (y - 1 >= 0 && grid[x][y - 1] == 1 && !seen[x][y - 1]) {
            seen[x][y - 1] = true;
            dfs(grid, seen, x, y - 1);
        }
    }
}
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> paths = new ArrayList<>();
        List<Integer> path = new ArrayList<>();

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        permute(map, paths, path, nums.length);
        return paths;
    }

    private void permute(Map<Integer, Integer> map, List<List<Integer>> paths, List<Integer> path, int length) {
        if (path.size() == length) {
            paths.add(new ArrayList<Integer>(path));
            return;
        }
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            if (e.getValue() == 0) {
                continue;
            }
            map.put(e.getKey(), e.getValue() - 1);
            path.add(e.getKey());
            permute(map, paths, path, length);
            path.removeLast();
            map.put(e.getKey(), e.getValue() + 1);
        }
    }
}
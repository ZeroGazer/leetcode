class MyCircularQueue {

    private int[] queue;
    private int count;
    private int head;

    public MyCircularQueue(int k) {
        queue = new int[k];
    }
    
    public boolean enQueue(int value) {
        if (isFull()) {
            return false;
        }

        queue[(head + count) % queue.length] = value;
        count++;

        return true;
    }
    
    public boolean deQueue() {
        if (isEmpty()) {
            return false;
        }

        head = (head + 1) % queue.length;
        count--;

        return true;
    }
    
    public int Front() {
        if (isEmpty()) {
            return -1;
        }
        return queue[head];
    }
    
    public int Rear() {
        if (isEmpty()) {
            return -1;
        }
        return queue[(head + count - 1) % queue.length];
    }
    
    public boolean isEmpty() {
        return count == 0;
    }
    
    public boolean isFull() {
        return count == queue.length;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
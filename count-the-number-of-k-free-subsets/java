class Solution {
    public long countTheNumOfKFreeSubsets(int[] nums, int k) {
        Arrays.sort(nums);
        List<Integer> list = Arrays.stream(nums).boxed().collect(Collectors.toList());
        List<List<Integer>> groups = new ArrayList<>();
        while (!list.isEmpty()) {
            List<Integer> group = new ArrayList<>();
            group.add(list.getFirst());
            list.remove(0);
            for (Iterator<Integer> it = list.iterator(); it.hasNext();) {
                int next = it.next();
                if (next > group.getLast() + k) {
                    break;
                } else if (next == group.getLast() + k) {
                    group.add(next);
                    it.remove();
                }
            }
            groups.add(group);
        }

        long product = 1;
        for (List<Integer> group : groups) {
            long head1 = 1, head2 = 1;
            for (int i = 1; i <= group.size(); i++) {
                long head = head1 + head2;
                head1 = head2;
                head2 = head;
            }
            product *= head2;
        }
        return product;
    }
}
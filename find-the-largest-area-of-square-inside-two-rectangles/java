class Solution {
    public long largestSquareArea(int[][] bottomLeft, int[][] topRight) {
        int n = bottomLeft.length;
        long area = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int[] bl1 = bottomLeft[i];
                int[] tr1 = topRight[i];
                int[] bl2 = bottomLeft[j];
                int[] tr2 = topRight[j];
                if (isIntersect(bl1, bl2, tr1, tr2)) {
                    int width = 0;
                    if (bl2[0] <= bl1[0] && bl1[0] <= tr2[0]) {
                        width = Math.min(tr2[0], tr1[0]) - bl1[0];
                    } else {
                        width = Math.min(tr2[0], tr1[0]) - bl2[0];
                    }
                    int height = 0;
                    if (bl2[1] <= bl1[1] && bl1[1] <= tr2[1]) {
                        height = Math.min(tr2[1], tr1[1]) - bl1[1];
                    } else {
                        height = Math.min(tr2[1], tr1[1]) - bl2[1];
                    }
                    long side = Math.min(height, width);
                    area = Math.max(area, side * side);
                }
            }
        }
        return area;
    }
    
    boolean isIntersect(int[] bl1, int[] bl2, int[] tr1, int[] tr2) {
        if (!(bl2[0] <= bl1[0] && bl1[0] <= tr2[0] || bl1[0] <= bl2[0] && bl2[0] <= tr1[0])) {
            return false;
        }
        if (!(bl2[1] <= bl1[1] && bl1[1] <= tr2[1] || bl1[1] <= bl2[1] && bl2[1] <= tr1[1])) {
            return false;
        }
        return true;
    }
}
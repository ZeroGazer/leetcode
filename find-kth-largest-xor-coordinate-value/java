class Solution {
    public int kthLargestValue(int[][] matrix, int k) {
        Queue<Integer> pq = new PriorityQueue<>();
        int[][] xor = new int[matrix.length][matrix[0].length];
        xor[0][0] = matrix[0][0];
        for (int i = 1; i < xor.length; i++) {
            xor[i][0] = xor[i - 1][0] ^ matrix[i][0];
        }
        for (int i = 1; i < xor[0].length; i++) {
            xor[0][i] = xor[0][i - 1] ^ matrix[0][i];
        }
        for (int i = 1; i < xor.length; i++) {
            for (int j = 1; j < xor[i].length; j++) {
                xor[i][j] = xor[i - 1][j - 1] ^ xor[i - 1][j] ^ xor[i][j - 1] ^ matrix[i][j];
            }
        }
        for (int i = 0; i < xor.length; i++) {
            for (int j = 0; j < xor[i].length; j++) {
                pq.offer(xor[i][j]);
                if (pq.size() > k) {
                    pq.poll();
                }
            }
        }
        return pq.peek();
    }
}
class Solution {
    private Map<Integer, int[]> directions = Map.of(
        0, new int[] {0, 1},
        1, new int[] {1, 0},
        2, new int[] {0, -1},
        3, new int[] {-1, 0}
    );

    public int numberOfCleanRooms(int[][] room) {
        Set<List<Integer>> visited = new HashSet<>();
        Set<List<Integer>> cleaned = new HashSet<>();
        dfs(room, visited, cleaned, 0, 0, 0);
        return cleaned.size();
    }

    private void dfs(int[][] room, Set<List<Integer>> visited, Set<List<Integer>> cleaned, int x, int y, int direction) {
        int m = room.length, n = room[0].length;
        if (visited.contains(List.of(x, y, direction))) {
            return;
        }
        visited.add(List.of(x, y, direction));
        cleaned.add(List.of(x, y));
        int[] next = {x + directions.get(direction)[0], y + directions.get(direction)[1]};
        if (next[0] > -1 && next[0] < m && next[1] > -1 && next[1] < n) {
            if (room[next[0]][next[1]] == 1) {
                dfs(room, visited, cleaned, x, y, (direction + 1) % 4);
            } else {
                dfs(room, visited, cleaned, next[0], next[1], direction);
            }
        } else {
            dfs(room, visited, cleaned, x, y, (direction + 1) % 4);
        }
    }
}
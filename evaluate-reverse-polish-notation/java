import java.util.Stack;

class Solution {
    public int evalRPN(String[] tokens) {
        Stack<String> stack = new Stack<>();
        for (int i = 0; i < tokens.length; i++) {
            String s = tokens[i];
            String operand2;
            String operand1;
            switch (s) {
                case "+":
                    operand2 = stack.pop();
                    operand1 = stack.pop();
                    stack.push(Integer.toString(Integer.parseInt(operand1) + Integer.parseInt(operand2), 10));
                    break;
                case "-":
                    operand2 = stack.pop();
                    operand1 = stack.pop();
                    stack.push(Integer.toString(Integer.parseInt(operand1) - Integer.parseInt(operand2), 10));
                    break;
                case "*":
                    operand2 = stack.pop();
                    operand1 = stack.pop();
                    stack.push(Integer.toString(Integer.parseInt(operand1) * Integer.parseInt(operand2), 10));
                    break;
                case "/":
                    operand2 = stack.pop();
                    operand1 = stack.pop();
                    stack.push(Integer.toString(Integer.parseInt(operand1) / Integer.parseInt(operand2), 10));
                    break;
                default:
                    stack.add(tokens[i]);
            }
        }
        return Integer.parseInt(stack.pop());
    }
}
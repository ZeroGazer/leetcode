class Solution {

    private int[][] directions = new int[][] {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
 
    private boolean[][] seen;

    public boolean exist(char[][] board, String word) {
        seen = new boolean[board.length][board[0].length];
        char[] wordArray = word.toCharArray();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == wordArray[0]) {
                    seen[i][j] = true;
                    if (dfs(board, wordArray, 1, i, j)) {
                        return true;
                    }
                    seen[i][j] = false;
                }
            }
        }
        return false;
    }

    private boolean dfs(char[][] board, char[] word, int start, int x, int y) {
        if (start == word.length ) {
            return true;
        }
        for (int[] direction : directions) {
            int i = direction[0] + x;
            int j = direction[1] + y;
            if (i < 0 || i >= board.length || j < 0 || j >= board[0].length) {
                continue;
            }
            if (seen[i][j] || board[i][j] != word[start]) {
                continue;
            }
            seen[i][j] = true;
            if (dfs(board, word, start + 1, i, j)) {
                return true;
            }
            seen[i][j] = false;
        }
        return false;
    }
}
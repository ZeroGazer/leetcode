class Solution {
    public int orangesRotting(int[][] grid) {
        int minute = 0;
        Queue<int[]> queue = new LinkedList<>();

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 2) {
                    queue.add(new int[] {i, j});
                }
            }
        }

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] current = queue.poll();
                for (int j = Math.max(0, current[0] - 1); j < Math.min(current[0] + 2, grid.length); j++) {
                    if (grid[j][current[1]] == 1) {
                        queue.add(new int[] {j, current[1]});
                        grid[j][current[1]] = 2;
                    }
                }
                for (int j = Math.max(0, current[1] - 1); j < Math.min(current[1] + 2, grid[current[0]].length); j++) {
                    if (grid[current[0]][j] == 1) {
                        queue.add(new int[] {current[0], j});
                        grid[current[0]][j] = 2;
                    }
                }
            }
            if (!queue.isEmpty()) {
                minute++;
            }
        }
        if (!hasFresh(grid)) {
            return minute;
        }
        return -1;
    }

    private boolean hasFresh(int[][] grid) {
        return Arrays.stream(grid).anyMatch(row -> Arrays.stream(row).anyMatch(e -> e == 1));
    }
}
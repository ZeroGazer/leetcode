/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private int max = 0;

    public int longestUnivaluePath(TreeNode root) {
        dfs(root);
        return max;
    }

    private int dfs(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int left = dfs(root.left);
        int right = dfs(root.right);
        int length = Math.max(left, right);
        if (root.left != null && root.right != null && root.left.val == root.val && root.right.val == root.val) {
            length = left + right + 2;
        } else if (root.left != null && root.left.val == root.val) {
            left++;
            length = Math.max(left, right);
        } else if (root.right != null && root.right.val == root.val) {
            right++;
            length = Math.max(left, right);
        }
        
        max = Math.max(max, length);
        System.out.println(max);

        if (root.left != null && root.right != null && root.left.val == root.val && root.right.val == root.val) {
            return Math.max(left, right) + 1;
        } else if (root.left != null && root.left.val == root.val) {
            return left;
        } else if (root.right != null && root.right.val == root.val) {
            return right;
        }
        return 0;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        Set<Integer> toDelete = new HashSet<>();
        Arrays.stream(to_delete).forEach(toDelete::add);

        List<TreeNode> result = new ArrayList<>();
        if (root != null) {
            if (!dfs(root, toDelete, result)) {
                root.left = null;
                root.right = null;
            } else {
                result.add(root);
            }
        }
        
        return result;
    }

    private boolean dfs(TreeNode root, Set<Integer> toDelete, List<TreeNode> result) {
        if (root == null) {
            return false;
        }
        boolean delete = !toDelete.contains(root.val);
        if (!dfs(root.left, toDelete, result)) {
            root.left = null;
        } else if (!delete) {
            result.add(root.left);
        }
        if (!dfs(root.right, toDelete, result)) {
            root.right = null;
        } else if (!delete) {
            result.add(root.right);
        }
        return delete;
    }
}
class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        Arrays.stream(edges).forEach(edge -> {
            map.computeIfAbsent(edge[0], key -> new ArrayList<Integer>()).add(edge[1]);
            map.computeIfAbsent(edge[1], key -> new ArrayList<Integer>()).add(edge[0]);
        });
        boolean[] seen = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        seen[source] = true;
        queue.add(source);
        while (!queue.isEmpty()) {
            int current = queue.poll();
            if (current == destination) {
                return true;
            }
            if (map.containsKey(current)) {
                for (int neighbour: map.get(current)) {
                    if (!seen[neighbour]) {
                        queue.add(neighbour);
                        seen[neighbour] = true;
                    }
                }
            }
        }
        return false;
    }
}
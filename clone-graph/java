/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if (node == null) {
            return null;
        }

        Map<Integer, Node> seenMap = new HashMap<>();
        Queue<Node> queue = new LinkedList<>();
        queue.add(node);
        Node rootNode = new Node();
        rootNode.val = node.val;
        seenMap.put(rootNode.val, rootNode);
        while (!queue.isEmpty()) {
            Node currentNode = queue.poll();
            Node newNode = seenMap.get(currentNode.val);
            currentNode.neighbors.forEach(neighbor -> {
                newNode.neighbors.add(seenMap.computeIfAbsent(neighbor.val, neighborVal -> {
                    Node newNeighbor = new Node();
                    newNeighbor.val = neighborVal;
                    queue.add(neighbor);
                    return newNeighbor;
                }));
            });
        }
        return rootNode;
    }
}
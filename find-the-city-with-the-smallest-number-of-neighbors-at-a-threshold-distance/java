class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        List<List<int[]>> adjacencyList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adjacencyList.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjacencyList.get(edge[0]).add(new int[] {edge[1], edge[2]});
            adjacencyList.get(edge[1]).add(new int[] {edge[0], edge[2]});
        }
        int[][] shortestPath = new int[n][n];

        for (int i = 0; i < n; i++) {
            Arrays.fill(shortestPath[i], Integer.MAX_VALUE);
            shortestPath[i][i] = 0;
            findShortestPath(adjacencyList, shortestPath, i);
        }

        int min = Integer.MAX_VALUE;
        int city = 0;
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (shortestPath[i][j] <= distanceThreshold) {
                    count++;
                }
            }
            if (count <= min) {
                min = count;
                city = i;
            }
        }
        return city;
    }

    private void findShortestPath(List<List<int[]>> adjacencyList, int[][] shortestPath, int city) {
        Queue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(e -> e[1]));
        queue.add(new int[] {city, 0});
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int currentCity = current[0], currentCost = current[1];
            for (int[] neighbour : adjacencyList.get(currentCity)) {
                int newCost = neighbour[1] + currentCost;
                if (newCost < shortestPath[city][neighbour[0]]) {
                    shortestPath[city][neighbour[0]] = newCost;
                    queue.add(new int[] {neighbour[0], newCost});
                }
            }
        }
    }
}
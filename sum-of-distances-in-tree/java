class Solution {
    private Map<Integer, List<Integer>> graph = new HashMap<>();
    private int[] result;
    private int[] count;

    public int[] sumOfDistancesInTree(int n, int[][] edges) {
        result = new int[n];
        count = new int[n];
        Arrays.fill(count, 1);
        for (int[] edge : edges) {
            graph.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(edge[1]);
            graph.computeIfAbsent(edge[1], k -> new ArrayList<>()).add(edge[0]);
        }
        dfs1(0, -1);
        dfs2(0, -1, n);
        return result;
    }

    private void dfs1(int node, int parent) {
        if (graph.containsKey(node)) {
            for (int child: graph.get(node)) {
                if (child != parent) {
                    dfs1(child, node);
                    count[node] += count[child];
                    result[node] += result[child] + count[child];
                }
            }
        }
    }

    private void dfs2(int node, int parent, int n) {
        if (graph.containsKey(node)) {
            for (int child: graph.get(node)) {
                if (child != parent) {
                    result[child] = result[node] - count[child] + n - count[child];
                    dfs2(child, node, n);
                }
            }
        }
    }
}
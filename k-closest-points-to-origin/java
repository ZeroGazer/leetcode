import java.math.BigDecimal;
import java.math.MathContext;
import java.util.Comparator;
import java.util.PriorityQueue;

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Point> queue = new PriorityQueue<>(k, Comparator.reverseOrder());
        int n = 0;
        for (int i = 0; i < points.length; i++) {
            Point e = new Point(points[i][0], points[i][1]);
            if (n < k) {
                queue.add(e);
                n++;
            } else if (queue.peek().compareTo(e) > 0) {
                queue.poll();
                queue.add(e);
            }
        }
        
        int[][] result = new int[k][2];
        for (int i = 0; i < k; i++) {
            Point e = queue.poll();
            result[i][0] = e.getX();
            result[i][1] = e.getY();
        }
        return result;
    }

    private static class Point implements Comparable<Point> {
        private final int x;
        private final int y;
        private final BigDecimal distance;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
            this.distance = new BigDecimal(x).pow(2).add(new BigDecimal(y).pow(2)).sqrt(MathContext.DECIMAL64);
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public BigDecimal getDistance() {
            return distance;
        }

        @Override
        public int compareTo(Point o) {
            return this.distance.compareTo(o.distance);
        }
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        if (intervals.length == 0) {
            return new int[][] {newInterval};
        }

        List<int[]> list = new ArrayList<>(Arrays.asList(intervals));

        int index = findIndex(list, newInterval[0]);
        System.out.println(index);
        if (index != list.size()) {
            list.add(index, newInterval);
        } else {
            list.add(newInterval);
        }

        List<int[]> result = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            int[] e = list.get(i);
            while (i < list.size() && Math.min(e[1], list.get(i)[1]) - Math.max(e[0], list.get(i)[0]) >= 0) {
                e = new int[]{ Math.min(e[0], list.get(i)[0]), Math.max(e[1], list.get(i)[1]) };
                i++;
            }
            result.add(e);
            i--;
        }
        
        return result.toArray(new int[result.size()][2]);
    }

    private int findIndex(List<int[]> list, int start) {
        int p = 0, q = list.size() - 1;
        int ans = list.size();
        while (p <= q) {
            int m = (q-p)/2 + p;
            if (start < list.get(m)[0]) {
                ans = m;
                q = m - 1;
            } else {
                p = m + 1;
            }
        }
        return ans;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Queue<Integer> priorityQueue = new PriorityQueue<>(Comparator.reverseOrder());
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();
            if (current == null) {
                continue;
            }
            if (priorityQueue.size() < k) {
                priorityQueue.add(current.val);
            } else if (priorityQueue.peek() > current.val) {
                priorityQueue.poll();
                priorityQueue.offer(current.val);
            }
            queue.add(current.left);
            queue.add(current.right);
        }
        return priorityQueue.poll();
    }
}
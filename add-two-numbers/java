/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null && l2 == null || l1 != null && l2 == null) {
            return l1;
        }

        if (l1 == null && l2 != null) {
            return l2;
        }

        ListNode head = new ListNode((l1.val + l2.val) % 10);
        head.next = addTwoNumbers(l1.next, l2.next, (l1.val + l2.val) / 10);
        return head;
    }

    private ListNode addTwoNumbers(ListNode l1, ListNode l2, int carry) {
        if (l1 == null && l2 == null) {
            if (carry == 1) {
                return new ListNode(1);
            }
            return null;
        }

        int l1val = l1 == null ? 0 : l1.val;
        int l2val = l2 == null ? 0 : l2.val;

        ListNode l1next = l1 == null ? null : l1.next;
        ListNode l2next = l2 == null ? null : l2.next;

        ListNode head = new ListNode((l1val + l2val + carry) % 10);
        head.next = addTwoNumbers(l1next, l2next, (l1val + l2val + carry) / 10);
        return head;
    }
}
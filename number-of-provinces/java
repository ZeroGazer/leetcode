import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.Set;

class Solution {
    public int findCircleNum(int[][] isConnected) {
        DisjointSet ds = new DisjointSet(isConnected.length);

        int result = isConnected.length;
        
        for (int i = 0; i < isConnected.length; i++) {
            for (int j = i + 1; j < isConnected[i].length; j++) {
                if (isConnected[i][j] == 1 && ds.find(i) != ds.find(j)) {
                    ds.union(i, j);
                    result--;
                }
            }
        }

        return result;
    }
    
    private static final class DisjointSet {
        private int[] root;
        private int[] rank;
        
        public DisjointSet(int size) {
            this.root = new int[size];
            this.rank = new int[size];
            for (int i = 0; i < size; i++) {
                this.root[i] = i;
                this.rank[i] = 1;
            }
        }
        
        public int find(int a) {
            if (this.root[a] == a) {
                return a;
            }
            return this.root[a] = find(this.root[a]);
        }
        
        public void union(int a, int b) {
            int rootA = find(a);
            int rootB = find(b);
            if (rootA != rootB) {
                if (rank[rootA] > rank[rootB]) {
                    root[rootB] = rootA;
                } else if (rank[rootA] < rank[rootB]) {
                    root[rootA] = rootB;
                } else {
                    rank[rootA] += 1;
                    root[rootB] = rootA;
                }
            }
        }
        
        public boolean isConnected(int a, int b) {
            return find(a) == find(b);
        }
    }
}
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        for (int i = 0; i < candidates.length; i++) {
            path.add(candidates[i]);
            dp(candidates, target, path, result, i);
            path.removeLast();
        }
        return result;
    }

    private void dp(int[] candidates, int target, List<Integer> path, List<List<Integer>> result, int index) {
        int sum = path.stream().reduce(0, (x, y) -> x + y);
        if (sum == target) {
            result.add(new ArrayList<Integer>(path));
            return;
        } else if (sum > target) {
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            path.add(candidates[i]);
            dp(candidates, target, path, result, i);
            path.removeLast();
        }
    }
}
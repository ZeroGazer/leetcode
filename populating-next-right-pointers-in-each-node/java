/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if (root == null) {
            return root;
        }

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        Queue<Node> nextQueue;
        do {
            Node current = queue.poll();
            nextQueue = new LinkedList<>();
            if (current.left != null) {
                nextQueue.add(current.left);
                nextQueue.add(current.right);
            }
            while (!queue.isEmpty()) {
                Node next = queue.poll();
                current.next = next;
                current = next;
                if (current.left != null) {
                    nextQueue.add(current.left);
                    nextQueue.add(current.right);
                }
            }
            queue = nextQueue;
        } while (!queue.isEmpty());
        
        return root;
    }
}
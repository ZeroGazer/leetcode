import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        Comparator<Integer> comparator = (x, y) -> {
            int sx = Arrays.stream(mat[x]).sum();
            int sy = Arrays.stream(mat[y]).sum();
            if (sx == sy) {
                return x - y;
            } else {
                return sx - sy;
            }
        };

        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k, comparator.reversed());
        for (int i = 0; i < mat.length; i++) {
            if (i < k) {
                priorityQueue.add(i);
            } else if (comparator.compare(priorityQueue.peek(), i) > 0) {
                priorityQueue.poll();
                priorityQueue.add(i);
            }
        }
        List<Integer> result = new ArrayList<>();
        while (!priorityQueue.isEmpty()) {
            result.add(priorityQueue.poll());
        }

        Collections.reverse(result);
        return result.stream().mapToInt(Integer::intValue).toArray();
    }
}
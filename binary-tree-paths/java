import java.util.StringJoiner;
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(result, path, root);
        return result;
    }
    
    private void dfs(List<String> result, List<Integer> path, TreeNode root) {
        path.add(root.val);
        if (root.left == null && root.right == null) {
            StringJoiner sj = new StringJoiner("->");
            for (Integer val : path) {
                sj.add(val + "");
            }
            result.add(sj.toString());
        } else {
            if (root.left != null) {
                dfs(result, path, root.left);
            }
            if (root.right != null) {
                dfs(result, path, root.right);
            }
        }
        path.removeLast();
    }
}
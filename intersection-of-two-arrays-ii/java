class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int num1 : nums1) {
            if (map1.containsKey(num1)) {
                map1.put(num1, map1.get(num1) + 1);
            } else {
                map1.put(num1, 1);
            }
        }
        for (int num2 : nums2) {
            if (map2.containsKey(num2)) {
                map2.put(num2, map2.get(num2) + 1);
            } else {
                map2.put(num2, 1);
            }
        }
        List<Integer> result = new ArrayList<>();
        for (Map.Entry<Integer, Integer> e : map1.entrySet()) {
            if (map2.containsKey(e.getKey())) {
                int size = Math.min(e.getValue(), map2.get(e.getKey()));
                for (int i = 0; i < size; i++) {
                    result.add(e.getKey());
                }
            }
        }
        return result.stream().mapToInt(Integer::intValue).toArray();
    }
}
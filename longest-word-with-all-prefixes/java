class Solution {
    public String longestWord(String[] words) {
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        String longest = "";
        for (String word : words) {
            if (trie.hasAllPrefix(word)) {
                if (word.length() > longest.length() || word.length() == longest.length() && word.compareTo(longest) < 0) {
                    longest = word;
                }
            }
        }
        return longest;
    }
}

class Trie {
    TrieNode root = new TrieNode();

    public void insert(String s) {
        TrieNode curr = root;
        for (char c : s.toCharArray()) {
            if (curr.children[c - 'a'] == null) {
                curr.children[c - 'a'] = new TrieNode();
            }
            curr = curr.children[c - 'a'];
        }
        curr.isEnd = true;
    }

    public boolean hasAllPrefix(String s) {
        TrieNode curr = root;
        for (char c : s.toCharArray()) {
            curr = curr.children[c - 'a'];
            if (curr == null || !curr.isEnd) {
                return false;
            }
        }
        return true;
    }
}

class TrieNode {
    TrieNode[] children = new TrieNode[26];
    boolean isEnd;
}
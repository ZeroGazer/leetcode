class Solution {
    public int removeStones(int[][] stones) {
        List<List<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < stones.length; i++) {
            edges.add(new ArrayList<>());
        }
        for (int i = 0; i < stones.length; i++) {
            for (int j = i + 1; j < stones.length; j++) {
                if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {
                    edges.get(i).add(j);
                    edges.get(j).add(i);
                }
            }
        }
        int count = 0;
        boolean[] visited = new boolean[stones.length];
        for (int i = 0; i < stones.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                dfs(edges, visited, i);
                count++;
            }
        }
        return stones.length - count;
    }

    private void dfs(List<List<Integer>> edges, boolean[] visited, int i) {
        for (int j = 0; j < edges.get(i).size(); j++) {
            if (!visited[edges.get(i).get(j)]) {
                visited[edges.get(i).get(j)] = true;
                dfs(edges, visited, edges.get(i).get(j));
            }
        }
    }
}
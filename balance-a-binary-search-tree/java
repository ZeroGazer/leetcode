/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode balanceBST(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        getInorder(root, list);
        return createBalancedBST(list, 0, list.size() - 1);
    }

    private void getInorder(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        getInorder(root.left, list);
        list.add(root.val);
        getInorder(root.right, list);
    }

    private TreeNode createBalancedBST(List<Integer> list, int start, int end) {
        if (start > end) {
            return null;
        }
        int middle = start + (end - start) / 2;
        return new TreeNode(
            list.get(middle),
            createBalancedBST(list, start, middle - 1),
            createBalancedBST(list, middle + 1, end)
        );
    }
}
class Solution {

    private int[] seen;
    private int finalDestination;
    private Map<Integer, List<Integer>> edgesMap = new HashMap<>();

    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
        seen = new int[n];
        finalDestination = destination;
        Arrays.stream(edges).forEach(edge -> edgesMap.
            computeIfAbsent(edge[0], key -> new ArrayList<Integer>()).add(edge[1]));
        if (edgesMap.containsKey(destination)) {
            return false;
        }

        return find(source);
    }

    private boolean find(int current) {
        seen[current] = 1;
        if (current == finalDestination) {
            seen[current] = 2;
            return true;
        }

        if (!edgesMap.containsKey(current)) {
            return false;
        }
        for (int neighbour: edgesMap.get(current)) {
            if (seen[neighbour] == 2) {
                continue;
            } else if (seen[neighbour] == 1) {
                return false;
            } else {
                if (!find(neighbour)) {
                    return false;
                }
            }
        }
        seen[current] = 2;
        return true;
    }
}
class Solution {
    public int regionsBySlashes(String[] grid) {
        int n = grid.length;
        boolean[][] seen = new boolean[3 * n][3 * n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                switch (grid[i].charAt(j)) {
                    case '/':
                        seen[3 * i + 2][3 * j] = true;
                        seen[3 * i + 1][3 * j + 1] = true;
                        seen[3 * i][3 * j + 2] = true;
                        break;
                    case '\\':
                        seen[3 * i][3 * j] = true;
                        seen[3 * i + 1][3 * j + 1] = true;
                        seen[3 * i + 2][3 * j + 2] = true;
                        break;
                }
            }
        }
        int count = 0;
        for (int i = 0; i < 3 * n; i++) {
            for (int j = 0; j < 3 * n; j++) {
                if (!seen[i][j]) {
                    System.out.println(i + " " + j);
                    seen[i][j] = true;
                    dfs(seen, i, j, 3 * n);
                    count++;
                }
            }
        }
        return count;
    }

    private void dfs(boolean[][] seen, int x, int y, int n) {
        if (x + 1 < n && !seen[x + 1][y]) {
            seen[x + 1][y] = true;
            dfs(seen, x + 1, y , n);
        }
        if (x - 1 >= 0 && !seen[x - 1][y]) {
            seen[x - 1][y] = true;
            dfs(seen, x - 1, y , n);
        }
        if (y + 1 < n && !seen[x][y + 1]) {
            seen[x][y + 1] = true;
            dfs(seen, x, y + 1 , n);
        }
        if (y - 1 >= 0 && !seen[x][y - 1]) {
            seen[x][y - 1] = true;
            dfs(seen, x, y - 1, n);
        }
    }
}
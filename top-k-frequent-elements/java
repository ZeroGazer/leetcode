import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> numToFreq = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (numToFreq.containsKey(nums[i])) {
                numToFreq.put(nums[i], numToFreq.get(nums[i]) + 1);
            } else {
                numToFreq.put(nums[i], 1);
            }
        }

        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(k, (x, y) -> numToFreq.get(y) - numToFreq.get(x));
        numToFreq.keySet().forEach(num -> priorityQueue.add(num));

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < k && !priorityQueue.isEmpty(); i++) {
            result.add(priorityQueue.poll());
        }

        return result.stream().mapToInt(Integer::intValue).toArray();
    }
}
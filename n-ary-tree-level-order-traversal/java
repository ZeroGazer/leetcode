/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> result = new ArrayList<>();
        
        if (root != null) {
            Queue<Node> queue = new LinkedList<>();
            queue.add(root);
            while (!queue.isEmpty()) {
                int size = queue.size();
                List<Integer> currentResult = new ArrayList<>();
                for (int i = 0; i < size; i++) {
                    Node node = queue.poll();
                    currentResult.add(node.val);
                    for (Node child: node.children) {
                        queue.add(child);
                    }
                }

                result.add(currentResult);
            }
        }

        return result;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode[] splitBST(TreeNode root, int target) {
        TreeNode left = new TreeNode(0);
        TreeNode currLeft = left;
        TreeNode right = new TreeNode(0);
        TreeNode currRight = right;

        TreeNode current = root, next;

        while (current != null) {
            if (current.val <= target) {
                currLeft.right = current;
                currLeft = current;
                next = current.right;
                currLeft.right = null;
                current = next;
            } else {
                currRight.left = current;
                currRight = current;
                next = current.left;
                currRight.left = null;
                current = next;
            }
        }
        return new TreeNode[] { left.right, right.left };
    }
}
class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (n != edges.length + 1) {
            return false;
        }

        UnionFind uf = new UnionFind(n);

        for (int i = 0; i < edges.length; i++) {
            if (!uf.union(edges[i][0], edges[i][1])) {
                return false;
            }
        }

        return true;
    }

    private static final class UnionFind {
        private int[] root;
        private int[] rank;

        public UnionFind(int size) {
            root = new int[size];
            rank = new int[size];
            
            for (int i = 0; i < size; i++) {
                root[i] = i;
                rank[i] = 1;
            }
        }

        public int find(int a) {
            if (a == root[a]) {
                return a;
            }
            return root[a] = find(root[a]);
        }

        public boolean union(int a, int b) {
            int rootA = root[a];
            int rootB = root[b];

            if (rootA != rootB) {
                if (rank[rootA] > rank[rootB]) {
                    root[rootB] = rootA;
                } else if (rank[rootA] < rank[rootB]) {
                    root[rootA] = rootB;
                } else {
                    rank[rootA] += 1;
                    root[rootB] = rootA;
                }
                return true;
            }
            return false;
        }
    }
}
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid[0][0] == 1) {
            return -1;
        }

        boolean[][] seen = new boolean[grid.length][];
        for (int i = 0; i < seen.length; i++) {
            seen[i] = new boolean[grid.length];
        }

        Queue<LinkedList<int[]>> queue = new LinkedList<>();
        LinkedList<int[]> path = new LinkedList<>();
        path.add(new int[] {0, 0});
        queue.add(path);
        while (!queue.isEmpty()) {
            LinkedList<int[]> current = queue.poll();
            int[] node = current.getLast();
            if (node[0] == grid.length - 1 && node[1] == grid.length - 1) {
                return current.size();
            }
            for (int i = Math.max(node[0] - 1, 0); i < Math.min(node[0] + 2, grid.length); i++) {
                for (int j = Math.max(node[1] - 1, 0); j < Math.min(node[1] + 2, grid.length); j++) {
                    if (grid[i][j] == 0 && !seen[i][j]) {
                        seen[i][j] = true;
                        LinkedList<int[]> newPath = new LinkedList<>(current);
                        newPath.add(new int[] {i, j});
                        queue.add(newPath);
                    }
                }
            }
        }
        return -1;
    }
}
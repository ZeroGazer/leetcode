/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Set<TreeNode> isVisited = new HashSet<>();
        Stack<TreeNode> stack = new Stack<>();
        stack.add(root);
        
        while (!stack.isEmpty()) {
            TreeNode current = stack.pop();
            if (current == null) {
                continue;
            }
            if (isVisited.contains(current)) {
                result.add(current.val);
                continue;
            }
            isVisited.add(current);
            stack.add(current.right);
            stack.add(current);
            stack.add(current.left);
            
        }
        return result;
    }
}
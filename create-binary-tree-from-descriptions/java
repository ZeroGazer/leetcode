/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private Map<Integer, TreeNode> map = new HashMap<>();
    private Set<Integer> children = new HashSet<>();

    public TreeNode createBinaryTree(int[][] descriptions) {
        for (int[] description : descriptions) {
            TreeNode parent = map.computeIfAbsent(description[0], key -> new TreeNode(key));
            TreeNode child = map.computeIfAbsent(description[1], key -> new TreeNode(key));
            children.add(child.val);
            if (description[2] == 1) {
                parent.left = child;
            } else {
                parent.right = child;
            }
        }
        for (int key : map.keySet()) {
            if (!children.contains(key)) {
                return map.get(key);
            }
        }
        return null;
    }
}
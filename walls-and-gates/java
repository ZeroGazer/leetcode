class Solution {

    private int[][] directions = new int[][] {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

    public void wallsAndGates(int[][] rooms) {
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < rooms.length; i++) {
            for (int j = 0; j < rooms[i].length; j++) {
                if (rooms[i][j] == 0) {
                    queue.add(new int[] {i, j});
                }
            }
        }

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            Arrays.stream(directions).map(x -> new int[] {current[0] + x[0], current[1] + x[1]})
                .filter(x -> x[0] > -1 && x[0] < rooms.length &&  x[1] > -1 && x[1] < rooms[0].length)
                .forEach(x -> {
                    if (rooms[x[0]][x[1]] > rooms[current[0]][current[1]] + 1) {
                        rooms[x[0]][x[1]] = rooms[current[0]][current[1]] + 1;
                        queue.add(x);
                    }
                });
        }
    }
}
/**
 * This is the interface for the expression tree Node.
 * You should not remove it, and you can define some classes to implement it.
 */

abstract class Node {
    public abstract int evaluate();
    // define your fields here
};


/**
 * This is the TreeBuilder class.
 * You can treat it as the driver code that takes the postinfix input 
 * and returns the expression tree representing it as a Node.
 */

class TreeBuilder {
    Node buildTree(String[] postfix) {
        Stack<Node> stack = new Stack<>();
        for (String s : postfix) {
            TreeNode node = new TreeNode(s);
            try {
                Integer.parseInt(s);
            } catch (NumberFormatException e) {
                node.right = stack.pop();
                node.left = stack.pop();
            }
            stack.add(node);
        }
        return stack.pop();
    }

    class TreeNode extends Node {

        Node left;
        Node right;
        String s;
        public TreeNode(String s) {
            this.s = s;
        }

        @Override
        public int evaluate() {
            switch (s) {
                case "+":
                    return left.evaluate() + right.evaluate();
                case "-":
                    return left.evaluate() - right.evaluate();
                case "*":
                    return left.evaluate() * right.evaluate();
                case "/":
                    return left.evaluate() / right.evaluate();
                default:
                    return Integer.parseInt(s);
            }
        }
    }
};


/**
 * Your TreeBuilder object will be instantiated and called as such:
 * TreeBuilder obj = new TreeBuilder();
 * Node expTree = obj.buildTree(postfix);
 * int ans = expTree.evaluate();
 */
class Solution {
    public List<String> generateParenthesis(int n) {
        List<List<Character>> results = new ArrayList<>();
        List<Character> path = new ArrayList<>();
        dfs(results, path, n, 0, 0);
        return results.stream().map(e -> e.stream().map(String::valueOf).collect(Collectors.joining())).toList();
    }

    private void dfs(List<List<Character>> results, List<Character> path, int size, int open, int close) {
        if (path.size() == size * 2) {
            results.add(new ArrayList<>(path));
        }
        if (open < size) {
            path.add('(');
            dfs(results, path, size, open + 1, close);
            path.removeLast();
        }
        if (close < open) {
            path.add(')');
            dfs(results, path, size, open, close + 1);
            path.removeLast();
        }
    }
}
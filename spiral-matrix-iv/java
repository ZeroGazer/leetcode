/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private int[][] DIRECTIONS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int[][] result = new int[m][n];
        for (int[] is : result) {
            Arrays.fill(is, -1);
        }
        int i = 0, j = 0, direction = 0;
        while (head != null) {
            result[i][j] = head.val;
            head = head.next;
            int newI = i + DIRECTIONS[direction][0];
            int newJ = j + DIRECTIONS[direction][1];
            if (!(0 <= newI && newI < m) || !(0 <= newJ && newJ < n) || result[newI][newJ] != -1) {
                direction = (direction + 1) % 4;
            }
            i += DIRECTIONS[direction][0];
            j += DIRECTIONS[direction][1];
        }
        return result;
    }
}
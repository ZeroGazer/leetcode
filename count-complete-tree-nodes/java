/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int depth = getDepth(root);
        if (depth == 0) {
            return 1;
        }

        int left = 1, right = (int) Math.pow(2, depth) - 1;
        while (left <= right) {
            int middle = left + (right - left) / 2;
            if (exists(root, depth, middle)) {
                left = middle + 1;
            } else {
                right = middle - 1;
            }
        }
        return (int) Math.pow(2, depth) - 1 + left;
    }

    boolean exists(TreeNode root, int depth, int index) {
        int left = 0, right = (int) Math.pow(2, depth) - 1;
        for (int i = 0; i < depth; i++) {
            int middle = left + (right - left) / 2;
            if (index <= middle) {
                root = root.left;
                right = middle;
            } else {
                root = root.right;
                left = middle + 1;
            }
        }
        return root != null;
    }

    int getDepth(TreeNode root) {
        int depth = 0;
        while (root.left != null) {
            depth++;
            root = root.left;
        }
        return depth;
    } 
}
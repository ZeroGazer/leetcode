class Solution {
    public int minDifficulty(int[] jobDifficulty, int d) {
        if (jobDifficulty.length < d) {
            return -1;
        }

        int[][] memo = new int[d + 1][jobDifficulty.length + 1];
        for (int daysRemaining = 0; daysRemaining <= d; daysRemaining++) {
            for (int i = 0; i < jobDifficulty.length; i++) {
                memo[daysRemaining][i] = Integer.MAX_VALUE;
            }
        }
        for (int daysRemaining = 1; daysRemaining <= d; daysRemaining++) {
            for (int i = 0; i < jobDifficulty.length - daysRemaining + 1; i++) {
                int dailyMaxJobDiff = 0;
                for (int j = i + 1; j < jobDifficulty.length - daysRemaining + 2; j++) {
                    dailyMaxJobDiff = Math.max(dailyMaxJobDiff, jobDifficulty[j - 1]);
                    if (memo[daysRemaining - 1][j] != Integer.MAX_VALUE) {
                        memo[daysRemaining][i] = Math.min(memo[daysRemaining][i], dailyMaxJobDiff + memo[daysRemaining - 1][j]);
                    }
                }
            }
        }
        return memo[d][0] < Integer.MAX_VALUE ? memo[d][0] : -1;
    }
}
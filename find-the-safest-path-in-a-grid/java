class Solution {
    private int[][] DIRECTIONS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

    public int maximumSafenessFactor(List<List<Integer>> grid) {
        int n = grid.size();
        int[][] safeness = new int[n][n];
        for (int[] is : safeness) {
            Arrays.fill(is, -1);
        }
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid.get(i).get(j) > 0) {
                    queue.add(new int[] {i, j});
                    safeness[i][j] = 0;
                }
            }
        }
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] curr = queue.poll();
                for (int[] direction : DIRECTIONS) {
                    int[] next = {direction[0] + curr[0], direction[1] + curr[1]};
                    if (next[0] > -1 && next[0] < n && next[1] > -1 && next[1] < n && safeness[next[0]][next[1]] == -1) {
                        safeness[next[0]][next[1]] = safeness[curr[0]][curr[1]] + 1;
                        queue.add(next);
                    }
                }
            }
        }

        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                right = Math.max(right, safeness[i][j]);
            }
        }
        int result = 0;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isValid(safeness, mid)) {
                left = mid + 1;
                result = mid;
            } else {
                right = mid - 1;
            }
        }
        return result;
    }

    private boolean isValid(int[][] safeness, int target) {
        int n = safeness.length;
        if (safeness[0][0] < target || safeness[n - 1][n - 1] < target) {
            return false;
        }
        boolean[][] seen = new boolean[n][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {0, 0});
        seen[0][0] = true;
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            if (curr[0] == n - 1 && curr[1] == n - 1) {
                return true;
            }
            for (int[] direction : DIRECTIONS) {
                int[] next = {direction[0] + curr[0], direction[1] + curr[1]};
                if (next[0] > -1 && next[0] < n && next[1] > -1 && next[1] < n && !seen[next[0]][next[1]] && safeness[next[0]][next[1]] >= target) {
                    seen[next[0]][next[1]] = true;
                    queue.add(next);
                }
            }
        }
        return false;
    }
}